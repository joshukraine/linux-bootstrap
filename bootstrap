#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Linux desktop machine with my dotfiles
# and other development preferences.
#
# Much of this script was derived from thoughtbot's now unsupported Linux
# version of Laptop.
# https://github.com/thoughtbot/laptop/tree/39768b19959f74724ed0c0ea92e5b2f6f78e45c1
################################################################################


# Thank you, thoughtbot! :)
bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n[BOOTSTRAP] $fmt\n" "$@"
}


################################################################################
# Variable declarations
################################################################################

osname=$(uname)
DEFAULT_ASDF_VERSION="0.7.1"
DEFAULT_RUBY_VERSION="2.6.2"
DEFAULT_NODEJS_VERSION="8.12.0"
OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup

DOTFILES_REPO_URL="git@bitbucket.org:speedy1812/dotfiles.git"
DEFAULT_DOTFILES_BRANCH="master"
DOTFILES_DIR=$HOME/dotfiles

BOOTSTRAP_REPO_URL="git@github.com:speedy1812/linux-bootstrap.git"
DEFAULT_BOOTSTRAP_BRANCH="master"
BOOTSTRAP_DIR=$HOME/linux-bootstrap


################################################################################
# Make sure we're on Linux before continuing
################################################################################

if [[ "$osname" == 'Darwin' ]]; then
  bootstrap_echo "Oops, looks like you're on a Mac. Please check out the link
below for instructions on setting up macOS."
  bootstrap_echo "http://jsua.co/macos"
  exit 1
elif [[ "$osname" != 'Linux' ]]; then
  bootstrap_echo "Oops, it looks like you're using a non-supported OS. Exiting..."
  exit 1
fi

################################################################################
# Make sure SSH keys are set up before continuing
################################################################################

if [ ! -d $HOME/.ssh ]; then
  bootstrap_echo "You must generate your SSH keys before continuing, otherwise
  the dotfiles will not be able to be cloned."
  bootstrap_echo "Follow the directions at the link below:"
  bootstrap_echo "https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html"
  exit 1
fi

################################################################################
# Authenticate
################################################################################

sudo -v

# Keep-alive: update existing `sudo` time stamp until bootstrap has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

################################################################################
# Welcome and setup
################################################################################

echo
echo "*************************************************************************"
echo "*******                                                           *******"
echo "*******                 Welcome to Linux Bootstrap!               *******"
echo "*******                                                           *******"
echo "*************************************************************************"
echo

printf "Before we get started, let's get some info about your setup.\\n"

printf "\\nBootstrap script will be cloned from:
==> %s.\\n\\n" "$BOOTSTRAP_REPO_URL"
printf "Which branch should we use? (Leave blank for default: %s)\\n" "$DEFAULT_BOOTSTRAP_BRANCH"
read -r -p "> " BOOTSTRAP_BRANCH
if [ -n "$BOOTSTRAP_BRANCH" ]; then
	export BOOTSTRAP_BRANCH
else
	export BOOTSTRAP_BRANCH="$DEFAULT_BOOTSTRAP_BRANCH"
fi

printf "\\nDotfiles will be cloned from:
==> %s.\\n\\n" "$DOTFILES_REPO_URL"
printf "Which branch should we use? (Leave blank for default: %s)\\n" "$DEFAULT_DOTFILES_BRANCH"
read -r -p "> " DOTFILES_BRANCH
if [ -n "$DOTFILES_BRANCH" ]; then
	export DOTFILES_BRANCH
else
	export DOTFILES_BRANCH="$DEFAULT_DOTFILES_BRANCH"
fi

printf "\\nWhich version of asdf would you like to install?
(Leave blank for default: %s)\\n" "$DEFAULT_ASDF_VERSION"
read -r -p "> " ASDF_VERSION
if [ -n "$ASDF_VERSION" ]; then
	export ASDF_VERSION
else
	export ASDF_VERSION="$DEFAULT_ASDF_VERSION"
fi

printf "\\nWhich version of Node.js would you like to install?
Available versions: https://semver.io/node/versions
(Leave blank for default: %s)\\n" "$DEFAULT_NODEJS_VERSION"
read -r -p "> " ASDF_NODEJS_VERSION
export ASDF_NODEJS_VERSION=${ASDF_NODEJS_VERSION:-$DEFAULT_NODEJS_VERSION}

printf "\\nWhich version of Ruby would you like to install?
Available versions: https://raw.githubusercontent.com/postmodern/ruby-versions/master/ruby/versions.txt
(Leave blank for default: %s)\\n" "$DEFAULT_RUBY_VERSION"
read -r -p "> " ASDF_RUBY_VERSION
export ASDF_RUBY_VERSION=${ASDF_RUBY_VERSION:-$DEFAULT_RUBY_VERSION}

printf "\\nLooks good. Here's what we've got so far.\\n"
printf "Bootstrap branch: ==> [%s]\\n" "$BOOTSTRAP_BRANCH"
printf "Dotfiles branch:  ==> [%s]\\n" "$DOTFILES_BRANCH"
printf "asdf version:     ==> [%s]\\n" "$ASDF_VERSION"
printf "Node.js version:  ==> [%s]\\n" "$ASDF_NODEJS_VERSION"
printf "Ruby version:     ==> [%s]\\n" "$ASDF_RUBY_VERSION"

echo
read -p "Continue? (y/n) " -n 1 -r
echo
if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
	echo "Exiting..."
	exit 1
fi

################################################################################
# 1. Clean out unneeded software and update the system.
################################################################################

bootstrap_echo "Step 1: Cleaning out unneeded software ..."

sudo apt-get purge thunderbird\*
sudo apt-get remove --purge libreoffice\*

bootstrap_echo "Updating system packages ..."

if command -v aptitude >/dev/null; then
  bootstrap_echo "Using aptitude ..."
else
  bootstrap_echo "Installing aptitude ..."
  sudo apt-get install -y aptitude
fi

sudo aptitude update
sudo aptitude -y upgrade


################################################################################
# 2. Install basic tools
################################################################################

bootstrap_echo "Step 2: Installing basic tools..."

# https://gorails.com/setup/ubuntu/18.04
# Recommended deps for Ruby 2.6.1 minus git-core, nodejs,and yarn
bootstrap_echo "Installing Ruby dependencies ..."
sudo apt-get install curl zlib1g-dev build-essential libssl-dev
libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev
libcurl4-openssl-dev software-properties-common libffi-dev

bootstrap_echo "Installing other useful libraries..."
sudo aptitude install -y gettext unzip gcc make

# https://git-scm.com/download/linux
bootstrap_echo "Installing git..."
sudo add-apt-repository ppa:git-core/ppa
sudo apt update
sudo apt install git

bootstrap_echo "Installing sqlite3..."
sudo aptitude install -y sqlite3

bootstrap_echo "Installing Redis..."
sudo aptitude install -y redis-server

bootstrap_echo "Installing ctags..."
sudo aptitude install -y exuberant-ctags

bootstrap_echo "Installing Vim ..."
sudo aptitude remove vim-tiny -y
sudo aptitude install -y vim-gnome

bootstrap_echo "Installing htop..."
sudo aptitude install -y htop

bootstrap_echo "Installing tree..."
sudo aptitude install -y tree

if grep -qiE 'precise|saucy|trusty|utopic|vivid' /etc/os-release; then
  bootstrap_echo "Adding tmux ppa:pi-rho/dev..."
  sudo add-apt-repository -y ppa:pi-rho/dev
  sudo aptitude update
fi

bootstrap_echo "Installing tmux..." # http://stackoverflow.com/a/25952511
if grep -qiE 'trusty' /etc/os-release; then
  sudo aptitude install -y tmux=2.0-1~ppa1~t
elif grep -qiE 'vivid' /etc/os-release; then
  sudo aptitude install -y tmux=2.0-1~ppa1~v
else
  sudo aptitude install -y tmux
fi

bootstrap_echo "Installing zsh..."
sudo aptitude install -y zsh

# The Silver Searcher is require for the ag.vim plugin
bootstrap_echo "Installing Silver Searcher..."
sudo aptitude install -y silversearcher-ag

bootstrap_echo "Cloning linux-bootstrap repo..."
git clone "$BOOTSTRAP_REPO_URL" -b "$BOOTSTRAP_BRANCH" "$BOOTSTRAP_DIR"


################################################################################
# 3. Install oh-my-zsh
################################################################################

bootstrap_echo "Step 3: Installing oh-my-zsh..."

if [ -d "$HOME"/.oh-my-zsh ]; then
  rm -rf "$HOME"/.oh-my-zsh
fi

git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

bootstrap_echo "Changing your shell to zsh ..."

chsh -s "$(which zsh)"


################################################################################
# 4. Setup dotfiles
################################################################################

bootstrap_echo "Step 4: Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf "$OLD_DOTFILES_BACKUP"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BACKUP"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."

git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

# shellcheck source=/dev/null
# source "$DOTFILES_DIR"/install.sh

bootstrap_echo "Symlinking dotfiles..."

ln -nfs ~/dotfiles/gemrc ~/.gemrc
ln -nfs ~/dotfiles/gitignore_global ~/.gitignore_global
ln -nfs ~/dotfiles/gitconfig ~/.gitconfig
ln -nfs ~/dotfiles/tmux.conf ~/.tmux.conf
ln -nfs ~/dotfiles/railsrc ~/.railsrc
ln -nfs ~/dotfiles/vimrc ~/.vimrc
ln -nfs ~/dotfiles/zshrc ~/.zshrc
ln -nfs ~/dotfiles/asdfrc ~/.asdfrc
ln -nfs ~/dotfiles/tool-versions ~/.tool-versions
ln -nfs ~/dotfiles/default-gems ~/.default-gems
source ~/.zshrc

################################################################################
# 5. Install ~/bin utilities
################################################################################

bootstrap_echo "Step 5: Installing bin utilities..."

if [ ! -d "$HOME"/bin ]; then
  mkdir "$HOME"/bin
fi

cp -R "$BOOTSTRAP_DIR"/bin/* "$HOME"/bin/

bootstrap_echo "Done!"

################################################################################
# 6. Install Powerline-patched fonts
################################################################################

bootstrap_echo "Step 6: Installing fixed-width fonts patched for use with Powerline symbols..."

if [ -d "$HOME"/src/fonts ]; then
  rm -rf "$HOME"/src/fonts
fi

git clone https://github.com/powerline/fonts.git "$HOME"/src/fonts

cd "$HOME"/src/fonts || exit

./install.sh

cd "$HOME" || exit

rm -rf "$HOME"/src/fonts

bootstrap_echo "Done!"


################################################################################
# 7. Install Vundle and Vim plugins
################################################################################

bootstrap_echo "Step 7: Installing Vundle and Vim plugins..."

if [ -d "$HOME"/.vim/bundle ]; then
  rm -rf "$HOME"/.vim/bundle
fi

git clone https://github.com/gmarik/Vundle.vim.git "$HOME/.vim/bundle/Vundle.vim"

# So Vim won't complain about solarized not being found:
mkdir "$HOME"/.vim/colors
touch "$HOME"/.vim/colors/solarized.vim

vim +PluginInstall +qall

rm -rf "$HOME"/.vim/colors

bootstrap_echo "Done!"


################################################################################
# 8. Install asdf
################################################################################

bootstrap_echo "Step 8: Configuring asdf version manager..."

append_to_zshrc() {
local text="$1" zshrc
local skip_new_line="${2:-0}"

if [ -w "$HOME/.zshrc.local" ]; then
	zshrc="$HOME/.zshrc.local"
else
	zshrc="$HOME/.zshrc"
fi

if ! grep -Fqs "$text" "$zshrc"; then
	if [ "$skip_new_line" -eq 1 ]; then
		printf "%s\n" "$text" >> "$zshrc"
	else
		printf "\n%s\n" "$text" >> "$zshrc"
	fi
fi
}

if [ ! -d "$HOME/.asdf" ]; then
	git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v"$ASDF_VERSION"
	append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi

install_asdf_plugin() {
	local name="$1"
	local url="$2"

	if ! asdf plugin-list | grep -Fq "$name"; then
		asdf plugin-add "$name" "$url"
	fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

# Install eslint for linting Javascript
npm install -g eslint

bootstrap_echo "Done!"


################################################################################
# 9. Install Ruby, Bundler, and Node
################################################################################

bootstrap_echo "Step 9: Install Ruby, Bundler, and Node..."

bootstrap_echo "Installing Ruby $DEFAULT_RUBY_VERSION ..."
asdf install ruby "$DEFAULT_RUBY_VERSION"
gem update --system

gem_install_or_update() {
if gem list "$1" --installed > /dev/null; then
	gem update "$@"
else
	gem install "$@"
fi
}

gem_install_or_update "bundler"

bootstrap_echo "Installing Node $DEFAULT_NODEJS_VERSION ..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
asdf install nodejs "$DEFAULT_NODEJS_VERSION"

bootstrap_echo "Done!"

################################################################################
# 10. Set up Tmux Plugin Manager (https://github.com/tmux-plugins/tpm)
################################################################################

bootstrap_echo "Step 10: Setting up Tmux Plugin Manager..."

git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

bootstrap_echo "Done!"

echo ""
echo "******************************************************************"
echo "**** Bootstrap script complete! Please restart your computer. ****"
echo "******************************************************************"
echo ""
