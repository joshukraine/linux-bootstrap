#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Linux desktop machine with my dotfiles
# and other development preferences.
#
# Much of this script was derived from thoughtbot's now unsupported Linux
# version of Laptop.
# https://github.com/thoughtbot/laptop/tree/39768b19959f74724ed0c0ea92e5b2f6f78e45c1
################################################################################

# Thank you, thoughtbot! :)
bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n[BOOTSTRAP] $fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/bin/" ]; then
  mkdir "$HOME/bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/bin:$PATH"'

################################################################################
# Variable declarations
################################################################################

osname=$(uname)

ASDF_RUBY_VERSION="2.6.2"
ASDF_NODEJS_VERSION="10.15.3"
OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup

DOTFILES_REPO_URL="https://github.com/joshukraine/linux-dotfiles.git"
DOTFILES_BRANCH="march-2019-updates"
DOTFILES_DIR=$HOME/dotfiles

BOOTSTRAP_REPO_URL="https://github.com/joshukraine/linux-bootstrap.git"
BOOTSTRAP_BRANCH="march-2019-updates"
BOOTSTRAP_DIR=$HOME/linux-bootstrap


################################################################################
# Make sure we're on Linux before continuing
################################################################################

if [[ "$osname" == 'Darwin' ]]; then
  bootstrap_echo "Oops, looks like you're on a Mac. Please check out the link
below for instructions on setting up macOS."
  bootstrap_echo "http://jsua.co/macos"
  exit 1
elif [[ "$osname" != 'Linux' ]]; then
  bootstrap_echo "Oops, it looks like you're using a non-supported OS. Exiting..."
  exit 1
fi


################################################################################
# 1. Update the system.
################################################################################

bootstrap_echo "Step 1: Updating system packages ..."

sudo apt-get update
sudo apt-get -y upgrade


################################################################################
# 2. Install basic tools
################################################################################

bootstrap_echo "Step 2: Installing basic tools..."
sudo apt-get install -y \
  git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev \
  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev \
  libcurl4-openssl-dev software-properties-common libffi-dev dirmngr gnupg \
  apt-transport-https ca-certificates automake autoconf libncurses-dev \
  libxslt-dev libtool unixodbc-dev

bootstrap_echo "Installing Postgres..."
sudo apt-get install -y postgresql postgresql-contrib libpq-dev

bootstrap_echo "Installing ctags..."
sudo apt-get install -y exuberant-ctags

bootstrap_echo "Installing Vim..."
sudo apt-get remove vim-tiny -y
sudo apt-get install -y vim-gtk

bootstrap_echo "Installing Neovim..."
sudo add-apt-repository ppa:neovim-ppa/stable
sudo apt-get update
sudo apt-get install -y python-dev python-pip python3-dev python3-pip
sudo apt-get install -y neovim

bootstrap_echo "Installing htop..."
sudo apt-get install -y htop

bootstrap_echo "Installing tree..."
sudo apt-get install -y tree

bootstrap_echo "Installing tmux..."
sudo apt-get install -y tmux

bootstrap_echo "Installing ImageMagick..."
sudo apt-get install -y imagemagick

bootstrap_echo "Installing zsh..."
sudo apt-get install -y zsh

bootstrap_echo "Installing xclip..."
sudo apt-get install -y xclip

bootstrap_echo "Cloning linux-bootstrap repo..."
git clone "$BOOTSTRAP_REPO_URL" -b "$BOOTSTRAP_BRANCH" "$BOOTSTRAP_DIR"


################################################################################
# 3. Install oh-my-zsh
################################################################################

bootstrap_echo "Step 3: Installing oh-my-zsh..."

if [ -d "$HOME"/.oh-my-zsh ]; then
  rm -rf "$HOME"/.oh-my-zsh
fi

git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

bootstrap_echo "Changing your shell to zsh ..."

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  bootstrap_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    bootstrap_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac


################################################################################
# 4. Setup dotfiles (https://github.com/joshukraine/linux-dotfiles)
################################################################################

bootstrap_echo "Step 4: Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf "$OLD_DOTFILES_BACKUP"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BACKUP"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."

git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

# shellcheck source=/dev/null
source "$DOTFILES_DIR"/install.sh


################################################################################
# 5. Install ~/bin utilities
################################################################################

bootstrap_echo "Step 5: Installing bin utilities..."

if [ ! -d "$HOME"/bin ]; then
  mkdir "$HOME"/bin
fi

cp -R "$BOOTSTRAP_DIR"/bin/* "$HOME"/bin/


################################################################################
# 6. Install Fira Code font
# https://github.com/tonsky/FiraCode/wiki/Linux-instructions#manual-installation
################################################################################

bootstrap_echo "Step 6: Installing Fira Code fixed-width font..."

fonts_dir="${HOME}/.local/share/fonts"
if [ ! -d "${fonts_dir}" ]; then
    echo "mkdir -p $fonts_dir"
    mkdir -p "${fonts_dir}"
else
    echo "Found fonts dir $fonts_dir"
fi

for type in Bold Light Medium Regular Retina; do
    file_path="${HOME}/.local/share/fonts/FiraCode-${type}.ttf"
    file_url="https://github.com/tonsky/FiraCode/blob/master/distr/ttf/FiraCode-${type}.ttf?raw=true"
    if [ ! -e "${file_path}" ]; then
        echo "wget -O $file_path $file_url"
        wget -O "${file_path}" "${file_url}"
    else
        echo "Found existing file $file_path"
    fi;
done

echo "fc-cache -f"
fc-cache -f

bootstrap_echo "Done!"


################################################################################
# 7. Install asdf, Ruby, and Node
################################################################################

bootstrap_echo "Step 7: Installing asdf, Ruby, and Node..."

bootstrap_echo "Configuring asdf version manager..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.0
fi

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version="$2"
  asdf install "$language" "$version"
  asdf global "$language" "$version"
}

bootstrap_echo "Installing latest Ruby..."
cat << EOF > "$HOME"/.default-gems
bundler
haml_lint
neovim
pry
rubocop
tmuxinator
EOF
install_asdf_language "ruby" "$ASDF_RUBY_VERSION"
bootstrap_echo "Checking which Ruby and Gem installs we are using at this point..."
echo "Ruby --> $(command -v ruby)"
ruby -v
echo "Gem --> $(command -v gem)"
gem -v
gem update --system

bootstrap_echo "Installing latest Node..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs" "$ASDF_NODEJS_VERSION"
echo "Node --> $(command -v node)"
node -v
echo "NPM --> $(command -v npm)"
npm -v

npm install -g gulp-cli
npm install -g neovim
npm install -g pug
npm install -g standard
npm install -g stylelint
npm install -g svgo
npm install -g vue-cli


################################################################################
# 8. Install Yarn (https://yarnpkg.com/en/docs/install#debian-stable)
################################################################################

bootstrap_echo "Step 8: Installing Yarn..."
# https://yarnpkg.com/en/docs/install#debian-stable
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt-get update && sudo apt-get install --no-install-recommends yarn


################################################################################
# 9. Set up Tmuxinator (https://github.com/tmuxinator/tmuxinator)
################################################################################

bootstrap_echo "Step 9: Setting up Tmuxinator..."

if [ ! -d "$HOME"/.tmuxinator/ ]; then
  mkdir "$HOME"/.tmuxinator
fi

cp "$BOOTSTRAP_DIR"/lib/default.yml "$HOME"/.tmuxinator/

bootstrap_echo "Done!"


echo ""
echo "******************************************************************"
echo "**** Bootstrap script complete! Please restart your computer. ****"
echo "******************************************************************"
echo ""
